# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Interpol
scopeName: source.interpol
fileTypes: [int]
uuid: b059aca9-7261-413b-a3f7-1c453843ca89

patterns:
- include: '#interpol'

repository:
  interpol:
    patterns:
    - include: '#html'
    - include: '#string'
    - include: '#comment'
    - include: '#keyword'
    - include: '#constant'
    - include: '#identifier'

  html:
    patterns:
    - include: '#html-comment'
    - include: '#html-doctype'
    - include: '#html-tag'

  html-comment:
    name: comment.block.html
    begin: <!--
    end: --\s*>
    captures:
      '0': { name: punctuation.definition.comment.html }
    patterns:
    - name: invalid.illegal.bad-comments-or-CDATA.html
      match: --

  html-doctype:
    name: meta.tag.sgml.html
    begin: <!
    end: '>'
    captures:
      '0': { name: punctuation.definition.tag.html }
    patterns:
    - name: meta.tag.sgml.doctype.html
      begin: (DOCTYPE|doctype)
      end: (?=>)
      captures:
        '1': { name: entity.name.tag.doctype.html }
      patterns:
      - name: string.quoted.double.doctype.identifiers-and-DTDs.html
        match: '"[^">]*"'
    - name: invalid.illegal.bad-comments-or-CDATA.html
      match: (\s*)(?!--|>)\S(\s*)

  html-tag:
    name: meta.tag.other.html
    begin: (</?)([$_a-zA-Z][$_a-zA-Z0-9]*)?
    beginCaptures:
      '1': { name: punctuation.definition.tag.begin.html }
      '2': { name: punctuation.definition.tag.name.html }
    end: (/?>)
    endCaptures:
      '1': { name: punctuation.definition.tag.end.html }
    patterns:
    - include: '#interpol'

  string:
    patterns:
    - include: '#ml-string-double-quoted'
    - include: '#ml-string-single-quoted'
    - include: '#string-double-quoted'
    - include: '#string-single-quoted'

  ml-string-double-quoted:
    name: string.quoted.triple
    begin: '\"\"\"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin }
    end: '\"\"\"'
    endCaptures:
      '0': { name: punctuation.definition.string.end }
    patterns:
    - include: "#interpolation"

  ml-string-single-quoted:
    name: string.quoted.triple
    begin: "'''"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin }
    end: "'''"
    endCaptures:
      '0': { name: punctuation.definition.string.end }
    patterns:
    - include: "#interpolation"

  string-double-quoted:
    name: string.quoted.double
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin }
    end: '"'
    endCaptures:
      '0': { name: punctuation.definition.string.end }
    patterns:
    - include: "#interpolation"

  string-single-quoted:
    name: string.quoted.single
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin }
    end: "'"
    endCaptures:
      '0': { name: punctuation.definition.string.end }
    patterns:
    - include: "#interpolation"

  interpolation:
    patterns:
    - name: variable.parameter.index
      match: \%([1-9][0-9]*|[0-9])(\|[$_a-zA-Z][$_a-zA-Z0-9]*)*;?
    - name: variable.parameter.name
      match: \%([$_a-zA-Z][$_a-zA-Z0-9]*)(\|[$_a-zA-Z][$_a-zA-Z0-9]*)*;?
    - name: variable.parameter.position
      match: \%(\|[$_a-zA-Z][$_a-zA-Z0-9]*)*;?

  comment:
    name: comment.line.number-sign
    match: (#.*$)

  keyword:
    patterns:
    - name: keyword.control
      match: \b(for|def|from|import|export|let|if|unless|do|with|as|in|else|end|when|where)\b
    - name: keyword.operator
      match: \b(and|or|like|lt|gt|lte|le|gte|ge|mod|not)\b
    - name: keyword.operator
      match: ([\-+*\/|:@=(),\.\[\]]) 

  constant:
    patterns:
    - name: constant.language
      match: \b(self|nil|true|false)\b
    - name: constant.numeric
      match: (([1-9][0-9]*|[0-9])(\.[0-9]+)?([eE][+-]?[0-9])?)

  identifier:
    name: variable.parameter
    match: \b([$_a-zA-Z][$_a-zA-Z0-9]*)\b
    
...
